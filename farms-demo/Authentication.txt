1- PHP: Preventing Session Hijacking with token stored as a cookie?

 * Any data user keeps can be stolen;any data a visitor sends could be spoofed. Better store the remote IP in $_Session 
   when the session is opened, and compare the remote IP with every request. If they don't match, it's probably a hijack. 
   Generate a new ID and have the user log back in. 

2- Cookies : small file with maximun size 4 kb that the server stores on the client computer.
 * A cookie can only be read from the domain that it has been issued from.
 * Most of the websites on the internet display elements from other domains such as advertising. The domains serving these elements
   can also set their own cookies(Third parties cookies)
 * The cookie is setted to https if it is true( Then only client side scripting languages i.e. Javascript) or http if it is set to false. 
https://www.guru99.com/cookies-and-sessions.html
 
 - Session 
 * A session is a global variable stored on the server. 
 * Session can store large data than cookies, session are deleted when browser is closed, session are important to store info such as user id more securely on the server, alternatives to cookies for browser that does not support cookies. Store global variables in an efficient and more secure way compared to passing them in url.
 * Session must be stored before any html tag 

3- Session usage example 
https://stackoverflow.com/questions/41921048/how-to-authenticate-securely-by-session-tokens-and-cookies-updated

4- Session vs Token based authentication (Why do we need session or token authentication)
   https://medium.com/@sherryhsu/session-vs-token-based-authentication-11a6c5ac45e4
  - Session 
  * In the session based auth, the server will create a session for the user after the user login. 
  * The session id is stored on a cookie on the use's browser. 
  - token 
  Many web app use json web token (Jwt) instead of sessions for auth.  
  * In the In the token based application, the server creates JWT with a secret and sends the JWT to the client. The client stores the JWT (usually in local storage) and includes JWT in the header with every request. The server would then validate the JWT with every request from the client and sends response.
 * The big difference here is that user's state is not stored on the server. 
 * Most of the modern web applications use JWT for auth for reasons including scability and mobile device auth. 
 * Scalability
Session based authentication: Because the sessions are stored in the server’s memory, scaling becomes an issue when there is a huge number of users using the system at once.
 * Multiple device 
   - Session based authentication: Cookies normally work on a single domain or subdomains and they are normally disabled by browser if they work cross-domain (3rd party cookies). It poses issues when APIs are served from a different domain to mobile and web devices.
   - Token based authentication: There is no issue with cookies as the JWT is included in the request header.
   - Token Based Authentication using JWT is the more recommended method in modern web apps. One drawback with JWT is that the size of JWT is much bigger comparing with the session id stored in cookie because JWT contains more user information. Care must be taken to ensure only the necessary information is included in JWT and sensitive information should be omitted to prevent XSS security attacks.

5- Goodbye PHP Sessions, Hello JSON Web Tokens
https://coderwall.com/p/8wrxfw/goodbye-php-sessions-hello-json-web-tokens
 

  
